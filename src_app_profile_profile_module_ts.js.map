{"version":3,"file":"src_app_profile_profile_module_ts.js","mappings":"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","sources":["./src/app/profile/details.component.ts","./src/app/profile/details.component.html","./src/app/profile/layout.component.ts","./src/app/profile/layout.component.html","./src/app/profile/profile-routing.module.ts","./src/app/profile/profile.module.ts","./src/app/profile/update.component.ts","./src/app/profile/update.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\n\r\nimport { AccountService } from '../_services';\r\n\r\n@Component({ templateUrl: 'details.component.html' })\r\nexport class DetailsComponent {\r\n    account = this.accountService.accountValue;\r\n\r\n    constructor(private accountService: AccountService) { }\r\n}","<h1>My Profile</h1>\r\n<p>\r\n    <strong>Name: </strong> {{account.title}} {{account.firstName}} {{account.lastName}}<br />\r\n    <strong>Email: </strong> {{account.email}}\r\n</p>\r\n<p><a routerLink=\"update\">Update Profile</a></p>\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({ templateUrl: 'layout.component.html' })\r\nexport class LayoutComponent { }","<div class=\"p-4\">\r\n    <div class=\"container\">\r\n        <router-outlet></router-outlet>\r\n    </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LayoutComponent } from './layout.component';\r\nimport { DetailsComponent } from './details.component';\r\nimport { UpdateComponent } from './update.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: LayoutComponent,\r\n        children: [\r\n            { path: '', component: DetailsComponent },\r\n            { path: 'update', component: UpdateComponent }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class ProfileRoutingModule { }","import { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ProfileRoutingModule } from './profile-routing.module';\r\nimport { LayoutComponent } from './layout.component';\r\nimport { DetailsComponent } from './details.component';\r\nimport { UpdateComponent } from './update.component';\r\nimport { ScheduleModule } from '../schedule/schedule.module';\r\n\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MaterialModule } from 'src/app/material/material.module';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatNativeDateModule, MAT_DATE_LOCALE } from '@angular/material/core';\r\nimport { MatFormFieldModule, MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';\r\nimport { NgxMatDateAdapter, NgxMatDateFormats, NgxMatDatetimePickerModule, NGX_MAT_DATE_FORMATS } from '@angular-material-components/datetime-picker';\r\nimport { NgxMatMomentAdapter, NgxMatMomentModule, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS } from '@angular-material-components/moment-adapter';\r\nimport { environment } from 'src/environments/environment';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n\r\nconst CUSTOM_MOMENT_FORMATS: NgxMatDateFormats = {\r\n    parse: {\r\n      dateInput: `${environment.dateFormat}`,\r\n    },\r\n    display: {\r\n      dateInput: `${environment.dateFormat}`,\r\n      monthYearLabel: 'MMM YYYY',\r\n      dateA11yLabel: 'LL',\r\n      monthYearA11yLabel: 'MMMM YYYY',\r\n    },\r\n  };\r\n  \r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        ProfileRoutingModule,\r\n        ScheduleModule,\r\n\r\n        MaterialModule,\r\n        MatSortModule,\r\n        MatTableModule,\r\n        MatPaginatorModule,\r\n        MatButtonModule,\r\n        MatDatepickerModule,\r\n        MatNativeDateModule,\r\n        MatInputModule,\r\n        MatFormFieldModule,\r\n        NgxMatDatetimePickerModule,\r\n        NgxMatMomentModule,\r\n        MatSelectModule,\r\n    \r\n    ],\r\n    declarations: [\r\n        LayoutComponent,\r\n        DetailsComponent,\r\n        UpdateComponent\r\n    ],\r\n    providers: [\r\n        \r\n        {\r\n          provide: NgxMatDateAdapter,\r\n          useClass: NgxMatMomentAdapter, //Moment adapter\r\n          deps: [MAT_DATE_LOCALE, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS]\r\n        },\r\n        // values\r\n        { \r\n          provide: NGX_MAT_DATE_FORMATS, useValue: CUSTOM_MOMENT_FORMATS  \r\n        },\r\n        \r\n      ],\r\n})\r\nexport class ProfileModule { }","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '../_services';\r\nimport { MustMatch } from '../_helpers';\r\nimport { Schedule } from '../_models/schedule';\r\nimport { TimeHandler } from '../_helpers/time.handler';\r\nimport { environment } from 'src/environments/environment';\r\nimport * as moment from 'moment';\r\n@Component({ templateUrl: 'update.component.html' })\r\nexport class UpdateComponent implements OnInit {\r\n    DATE_FORMAT = `${environment.dateFormat}`;\r\n    \r\n    account = this.accountService.accountValue;\r\n    form: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n    deleting = false;\r\n    schedules: Schedule[] = [];\r\n    id: string = this.account.id;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            title: [this.account.title, Validators.required],\r\n            firstName: [this.account.firstName, Validators.required],\r\n            lastName: [this.account.lastName, Validators.required],\r\n            email: [this.account.email, [Validators.required, Validators.email]],\r\n            dob: [TimeHandler.convertServerDate2Local(this.account.dob), Validators.required],\r\n            password: ['', [Validators.minLength(6)]],\r\n            confirmPassword: ['', [Validators.minLength(6)]]\r\n        }, {\r\n            validator: MustMatch('password', 'confirmPassword')\r\n        });\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n\r\n        this.loading = true;\r\n\r\n        // Update account from this controls\r\n        this.account.title = this.form.controls['title'].value;\r\n        this.account.firstName = this.form.controls['firstName'].value;\r\n        this.account.lastName = this.form.controls['lastName'].value;\r\n        this.account.email = this.form.controls['email'].value;\r\n\r\n        this.account.password = this.form.controls['password'].value;\r\n        this.account.confirmPassword = this.form.controls['confirmPassword'].value;\r\n        this.account.dob = this.f['dob'].value; \r\n        this.account.schedules = this.schedules;\r\n\r\n\r\n        this.accountService.update(this.account.id, /*this.form.value*/this.account)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Update successful', { keepAfterRouteChange: true });\r\n                    this.loading = false;\r\n                    //this.router.navigate(['../'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    onDelete() {\r\n        if (confirm('Are you sure?')) {\r\n            this.deleting = true;\r\n            this.accountService.delete(this.account.id)\r\n                .pipe(first())\r\n                .subscribe(() => {\r\n                    this.alertService.success('Account deleted successfully', { keepAfterRouteChange: true });\r\n                });\r\n        }\r\n    }\r\n}","<h1>Update Profile</h1>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"row\">\r\n        <div class=\"col-4\">\r\n            <label>Title</label>\r\n            <select formControlName=\"title\" class=\"form-select\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['title'].errors }\">\r\n                <option value=\"\"></option>\r\n                <option value=\"Mr\">Mr</option>\r\n                <option value=\"Mrs\">Mrs</option>\r\n                <option value=\"Miss\">Miss</option>\r\n                <option value=\"Ms\">Ms</option>\r\n            </select>\r\n            <div *ngIf=\"submitted && f['title'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['title'].errors['required']\">Title is required</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-4\">\r\n            <label>First Name</label>\r\n            <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['firstName'].errors }\" />\r\n            <div *ngIf=\"submitted && f['firstName'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['firstName'].errors['required']\">First Name is required</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-4\">\r\n            <label>Last Name</label>\r\n            <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['lastName'].errors }\" />\r\n            <div *ngIf=\"submitted && f['lastName'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['lastName'].errors['required']\">Last Name is required</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"mb-3 row\">\r\n        <div class=\"col\">\r\n            <label>Email</label>\r\n            <input type=\"text\" formControlName=\"email\" class=\"form-control\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['email'].errors }\" />\r\n            <div *ngIf=\"submitted && f['email'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['email'].errors['required']\">Email is required</div>\r\n                <div *ngIf=\"f['email'].errors['email']\">Email must be a valid email address</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"mb-3 row\">\r\n        <div class=\"col\">\r\n            <mat-form-field appearance=\"outline\" hideRequiredMarker>\r\n                <mat-label>DOB</mat-label>\r\n                <input formControlName=\"dob\" #ref matInput [ngxMatDatetimePicker]=\"picker\" placeholder=\"Choose a date\"\r\n                    required />\r\n                <mat-datepicker-toggle matSuffix [for]=\"$any(picker)\"></mat-datepicker-toggle>\r\n                <mat-hint>{{DATE_FORMAT}}</mat-hint>\r\n                <ngx-mat-datetime-picker #picker [showSpinners]=\"true\" [showSeconds]=\"false\" [stepHour]=\"1\"\r\n                    [stepMinute]=\"1\" [stepSecond]=\"1\" [touchUi]=\"false\" [color]=\"undefined\" [enableMeridian]=\"false\"\r\n                    [disableMinute]=\"false\" [hideTime]=\"true\">\r\n                </ngx-mat-datetime-picker>\r\n                <mat-error *ngIf=\"f['dob'].errors\">Invalid DOB</mat-error>\r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n    <h3 class=\"pt-3\">Change Password</h3>\r\n    <p>Leave blank to keep the same password</p>\r\n    <div class=\"row\">\r\n        <div class=\"col\">\r\n            <label>Password</label>\r\n            <input type=\"password\" formControlName=\"password\" class=\"form-control\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['password'].errors }\" />\r\n            <div *ngIf=\"submitted && f['password'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['password'].errors['required']\">Password is required</div>\r\n                <div *ngIf=\"f['password'].errors['minlength']\">Password must be at least 6 characters</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col\">\r\n            <label>Confirm Password</label>\r\n            <input type=\"password\" formControlName=\"confirmPassword\" class=\"form-control\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['confirmPassword'].errors }\" />\r\n            <div *ngIf=\"submitted && f['confirmPassword'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['confirmPassword'].errors['required']\">Confirm Password is required</div>\r\n                <div *ngIf=\"f['confirmPassword'].errors['mustMatch']\">Passwords must match</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"mb-3\">\r\n        <button type=\"submit\" [disabled]=\"loading\" class=\"btn btn-primary mr-2\" [ngClass]=\"{ 'disabled': !form.controls['dob'].valid}\">\r\n            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n            Update\r\n        </button>\r\n        <a routerLink=\"../\" href=\"\" class=\"btn btn-link\">Back</a>\r\n    </div>\r\n</form>"],"names":["DetailsComponent","constructor","accountService","accountValue","selectors","decls","vars","consts","template","i0","LayoutComponent","RouterModule","UpdateComponent","routes","path","component","children","ProfileRoutingModule","forChild","imports","exports","ReactiveFormsModule","CommonModule","ScheduleModule","MatTableModule","MaterialModule","MatSortModule","MatPaginatorModule","MatButtonModule","MatDatepickerModule","MatInputModule","MatNativeDateModule","MAT_DATE_LOCALE","MatFormFieldModule","NgxMatDateAdapter","NgxMatDatetimePickerModule","NGX_MAT_DATE_FORMATS","NgxMatMomentAdapter","NgxMatMomentModule","NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS","environment","MatSelectModule","CUSTOM_MOMENT_FORMATS","parse","dateInput","dateFormat","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","ProfileModule","provide","useClass","deps","useValue","declarations","Validators","first","MustMatch","TimeHandler","formBuilder","route","router","alertService","account","id","ngOnInit","form","group","title","required","firstName","lastName","email","dob","convertServerDate2Local","password","minLength","confirmPassword","validator","f","controls","onSubmit","submitted","clear","invalid","loading","value","schedules","update","pipe","subscribe","next","success","keepAfterRouteChange","error","onDelete","confirm","deleting","delete","ctx"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}